{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tonyt\\\\projects\\\\hack kstate JTK\\\\HackKstate2024\\\\my-react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\n\n// Component for Weather Display and Spotify Authentication\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherDisplay = () => {\n  _s();\n  const [accessToken, setAccessToken] = useState(null); // State for access token\n\n  const clientId = 'c4e4950088434c8d842394760ae0280a';\n  const redirectUri = 'http://localhost:3000/callback';\n  const clientSecret = '57e542558805452a88c59a8eb84742dd'; // Define your client secret\n  const scopes = 'user-library-read user-read-private';\n\n  // Step 1: Redirect user to Spotify's Authorization URL when the component is mounted\n  useEffect(() => {\n    const authUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=code&redirect_uri=${encodeURIComponent(redirectUri)}&scope=${encodeURIComponent(scopes)}`;\n\n    // Check if the URL already has the authorization code (i.e., the user was redirected back)\n    const urlParams = new URLSearchParams(window.location.search);\n    const authorizationCode = urlParams.get('code');\n    if (authorizationCode) {\n      // Step 2: Exchange the authorization code for an access token\n      const fetchAccessToken = async () => {\n        const tokenUrl = 'https://accounts.spotify.com/api/token';\n        const body = new URLSearchParams({\n          grant_type: 'authorization_code',\n          code: authorizationCode,\n          redirect_uri: redirectUri\n        });\n        const headers = {\n          'Authorization': 'Basic ' + btoa(clientId + ':' + clientSecret),\n          // Base64 encode client ID and secret\n          'Content-Type': 'application/x-www-form-urlencoded'\n        };\n        try {\n          const response = await fetch(tokenUrl, {\n            method: 'POST',\n            headers,\n            body\n          });\n          const data = await response.json();\n          const newAccessToken = data.access_token;\n          setAccessToken(newAccessToken); // Store the access token in state\n        } catch (error) {\n          console.error('Error fetching access token:', error);\n        }\n      };\n      fetchAccessToken();\n    } else {\n      // Redirect the user to Spotify for authorization if no code is present\n      window.location.href = authUrl;\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: '#4A5568',\n      color: '#FFFFFF',\n      height: '100vh',\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"mood(x)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), accessToken ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Access Token: \", accessToken]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this) // You can use the access token for API calls now\n    : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Redirecting to Spotify for authorization...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherDisplay, \"/xrtmJPCXv3vYgXhoOEInGM3amE=\");\n_c = WeatherDisplay;\nexport default WeatherDisplay;\nvar _c;\n$RefreshReg$(_c, \"WeatherDisplay\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","WeatherDisplay","_s","accessToken","setAccessToken","clientId","redirectUri","clientSecret","scopes","authUrl","encodeURIComponent","urlParams","URLSearchParams","window","location","search","authorizationCode","get","fetchAccessToken","tokenUrl","body","grant_type","code","redirect_uri","headers","btoa","response","fetch","method","data","json","newAccessToken","access_token","error","console","href","style","backgroundColor","color","height","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/tonyt/projects/hack kstate JTK/HackKstate2024/my-react-app/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\n// Component for Weather Display and Spotify Authentication\nconst WeatherDisplay = () => {\n  const [accessToken, setAccessToken] = useState(null);  // State for access token\n\n  const clientId = 'c4e4950088434c8d842394760ae0280a';\n  const redirectUri = 'http://localhost:3000/callback';\n  const clientSecret = '57e542558805452a88c59a8eb84742dd'; // Define your client secret\n  const scopes = 'user-library-read user-read-private';\n\n  // Step 1: Redirect user to Spotify's Authorization URL when the component is mounted\n  useEffect(() => {\n    const authUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=code&redirect_uri=${encodeURIComponent(redirectUri)}&scope=${encodeURIComponent(scopes)}`;\n\n    // Check if the URL already has the authorization code (i.e., the user was redirected back)\n    const urlParams = new URLSearchParams(window.location.search);\n    const authorizationCode = urlParams.get('code');\n    \n    if (authorizationCode) {\n      // Step 2: Exchange the authorization code for an access token\n      const fetchAccessToken = async () => {\n        const tokenUrl = 'https://accounts.spotify.com/api/token';\n        const body = new URLSearchParams({\n          grant_type: 'authorization_code',\n          code: authorizationCode,\n          redirect_uri: redirectUri,\n        });\n\n        const headers = {\n          'Authorization': 'Basic ' + btoa(clientId + ':' + clientSecret), // Base64 encode client ID and secret\n          'Content-Type': 'application/x-www-form-urlencoded',\n        };\n\n        try {\n          const response = await fetch(tokenUrl, {\n            method: 'POST',\n            headers,\n            body,\n          });\n          const data = await response.json();\n          const newAccessToken = data.access_token;\n          setAccessToken(newAccessToken);  // Store the access token in state\n        } catch (error) {\n          console.error('Error fetching access token:', error);\n        }\n      };\n\n      fetchAccessToken();\n    } else {\n      // Redirect the user to Spotify for authorization if no code is present\n      window.location.href = authUrl;\n    }\n  }, []);\n\n  return (\n    <div style={{ backgroundColor: '#4A5568', color: '#FFFFFF', height: '100vh', padding: '20px' }}>\n      {/* Display weather data and mood */}\n      <h1>mood(x)</h1>\n      {accessToken ? (\n        <p>Access Token: {accessToken}</p>  // You can use the access token for API calls now\n      ) : (\n        <p>Redirecting to Spotify for authorization...</p>\n      )}\n    </div>\n  );\n};\n\nexport default WeatherDisplay;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}