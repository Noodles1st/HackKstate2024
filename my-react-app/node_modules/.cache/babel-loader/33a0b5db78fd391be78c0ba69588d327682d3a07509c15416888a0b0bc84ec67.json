{"ast":null,"code":"const APIController = function () {\n  const clientId = 'PASTE YOUR CLIENT ID HERE';\n  const clientSecret = 'PASTE YOUR CLIENT SECRET HERE';\n\n  // private methods\n  const _getToken = async () => {\n    const result = await fetch('https://accounts.spotify.com/api/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': 'Basic ' + btoa(clientId + ':' + clientSecret)\n      },\n      body: 'grant_type=client_credentials'\n    });\n    const data = await result.json();\n    return data.access_token;\n  };\n  const _getGenres = async token => {\n    const result = await fetch(`https://api.spotify.com/v1/browse/categories?locale=sv_US`, {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Bearer ' + token\n      }\n    });\n    const data = await result.json();\n    return data.categories.items;\n  };\n  const _getPlaylistByGenre = async (token, genreId) => {\n    const limit = 10;\n    const result = await fetch(`https://api.spotify.com/v1/browse/categories/${genreId}/playlists?limit=${limit}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Bearer ' + token\n      }\n    });\n    const data = await result.json();\n    return data.playlists.items;\n  };\n  const _getTracks = async (token, tracksEndPoint) => {\n    const limit = 10;\n    const result = await fetch(`${tracksEndPoint}?limit=${limit}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Bearer ' + token\n      }\n    });\n    const data = await result.json();\n    return data.items;\n  };\n  const _getTrack = async (token, trackEndPoint) => {\n    const result = await fetch(`${trackEndPoint}`, {\n      method: 'GET',\n      headers: {\n        'Authorization': 'Bearer ' + token\n      }\n    });\n    const data = await result.json();\n    return data;\n  };\n  return {\n    getToken() {\n      return _getToken();\n    },\n    getGenres(token) {\n      return _getGenres(token);\n    },\n    getPlaylistByGenre(token, genreId) {\n      return _getPlaylistByGenre(token, genreId);\n    },\n    getTracks(token, tracksEndPoint) {\n      return _getTracks(token, tracksEndPoint);\n    },\n    getTrack(token, trackEndPoint) {\n      return _getTrack(token, trackEndPoint);\n    }\n  };\n}();\n\n// UI Module\nconst UIController = function () {\n  //object to hold references to html selectors\n  const DOMElements = {\n    selectGenre: '#select_genre',\n    selectPlaylist: '#select_playlist',\n    buttonSubmit: '#btn_submit',\n    divSongDetail: '#song-detail',\n    hfToken: '#hidden_token',\n    divSonglist: '.song-list'\n  };\n\n  //public methods\n  return {\n    //method to get input fields\n    inputField() {\n      return {\n        genre: document.querySelector(DOMElements.selectGenre),\n        playlist: document.querySelector(DOMElements.selectPlaylist),\n        tracks: document.querySelector(DOMElements.divSonglist),\n        submit: document.querySelector(DOMElements.buttonSubmit),\n        songDetail: document.querySelector(DOMElements.divSongDetail)\n      };\n    },\n    // need methods to create select list option\n    createGenre(text, value) {\n      const html = `<option value=\"${value}\">${text}</option>`;\n      document.querySelector(DOMElements.selectGenre).insertAdjacentHTML('beforeend', html);\n    },\n    createPlaylist(text, value) {\n      const html = `<option value=\"${value}\">${text}</option>`;\n      document.querySelector(DOMElements.selectPlaylist).insertAdjacentHTML('beforeend', html);\n    },\n    // need method to create a track list group item \n    createTrack(id, name) {\n      const html = `<a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-light\" id=\"${id}\">${name}</a>`;\n      document.querySelector(DOMElements.divSonglist).insertAdjacentHTML('beforeend', html);\n    },\n    // need method to create the song detail\n    createTrackDetail(img, title, artist) {\n      const detailDiv = document.querySelector(DOMElements.divSongDetail);\n      // any time user clicks a new song, we need to clear out the song detail div\n      detailDiv.innerHTML = '';\n      const html = `\n            <div class=\"row col-sm-12 px-0\">\n                <img src=\"${img}\" alt=\"\">        \n            </div>\n            <div class=\"row col-sm-12 px-0\">\n                <label for=\"Genre\" class=\"form-label col-sm-12\">${title}:</label>\n            </div>\n            <div class=\"row col-sm-12 px-0\">\n                <label for=\"artist\" class=\"form-label col-sm-12\">By ${artist}:</label>\n            </div> \n            `;\n      detailDiv.insertAdjacentHTML('beforeend', html);\n    },\n    resetTrackDetail() {\n      this.inputField().songDetail.innerHTML = '';\n    },\n    resetTracks() {\n      this.inputField().tracks.innerHTML = '';\n      this.resetTrackDetail();\n    },\n    resetPlaylist() {\n      this.inputField().playlist.innerHTML = '';\n      this.resetTracks();\n    },\n    storeToken(value) {\n      document.querySelector(DOMElements.hfToken).value = value;\n    },\n    getStoredToken() {\n      return {\n        token: document.querySelector(DOMElements.hfToken).value\n      };\n    }\n  };\n}();\nconst APPController = function (UICtrl, APICtrl) {\n  // get input field object ref\n  const DOMInputs = UICtrl.inputField();\n\n  // get genres on page load\n  const loadGenres = async () => {\n    //get the token\n    const token = await APICtrl.getToken();\n    //store the token onto the page\n    UICtrl.storeToken(token);\n    //get the genres\n    const genres = await APICtrl.getGenres(token);\n    //populate our genres select element\n    genres.forEach(element => UICtrl.createGenre(element.name, element.id));\n  };\n\n  // create genre change event listener\n  DOMInputs.genre.addEventListener('change', async () => {\n    //reset the playlist\n    UICtrl.resetPlaylist();\n    //get the token that's stored on the page\n    const token = UICtrl.getStoredToken().token;\n    // get the genre select field\n    const genreSelect = UICtrl.inputField().genre;\n    // get the genre id associated with the selected genre\n    const genreId = genreSelect.options[genreSelect.selectedIndex].value;\n    // ge the playlist based on a genre\n    const playlist = await APICtrl.getPlaylistByGenre(token, genreId);\n    // create a playlist list item for every playlist returned\n    playlist.forEach(p => UICtrl.createPlaylist(p.name, p.tracks.href));\n  });\n\n  // create submit button click event listener\n  DOMInputs.submit.addEventListener('click', async e => {\n    // prevent page reset\n    e.preventDefault();\n    // clear tracks\n    UICtrl.resetTracks();\n    //get the token\n    const token = UICtrl.getStoredToken().token;\n    // get the playlist field\n    const playlistSelect = UICtrl.inputField().playlist;\n    // get track endpoint based on the selected playlist\n    const tracksEndPoint = playlistSelect.options[playlistSelect.selectedIndex].value;\n    // get the list of tracks\n    const tracks = await APICtrl.getTracks(token, tracksEndPoint);\n    // create a track list item\n    tracks.forEach(el => UICtrl.createTrack(el.track.href, el.track.name));\n  });\n\n  // create song selection click event listener\n  DOMInputs.tracks.addEventListener('click', async e => {\n    // prevent page reset\n    e.preventDefault();\n    UICtrl.resetTrackDetail();\n    // get the token\n    const token = UICtrl.getStoredToken().token;\n    // get the track endpoint\n    const trackEndpoint = e.target.id;\n    //get the track object\n    const track = await APICtrl.getTrack(token, trackEndpoint);\n    // load the track details\n    UICtrl.createTrackDetail(track.album.images[2].url, track.name, track.artists[0].name);\n  });\n  return {\n    init() {\n      console.log('App is starting');\n      loadGenres();\n    }\n  };\n}(UIController, APIController);\n\n// will need to call a method to load the genres on page load\nAPPController.init();","map":{"version":3,"names":["APIController","clientId","clientSecret","_getToken","result","fetch","method","headers","btoa","body","data","json","access_token","_getGenres","token","categories","items","_getPlaylistByGenre","genreId","limit","playlists","_getTracks","tracksEndPoint","_getTrack","trackEndPoint","getToken","getGenres","getPlaylistByGenre","getTracks","getTrack","UIController","DOMElements","selectGenre","selectPlaylist","buttonSubmit","divSongDetail","hfToken","divSonglist","inputField","genre","document","querySelector","playlist","tracks","submit","songDetail","createGenre","text","value","html","insertAdjacentHTML","createPlaylist","createTrack","id","name","createTrackDetail","img","title","artist","detailDiv","innerHTML","resetTrackDetail","resetTracks","resetPlaylist","storeToken","getStoredToken","APPController","UICtrl","APICtrl","DOMInputs","loadGenres","genres","forEach","element","addEventListener","genreSelect","options","selectedIndex","p","href","e","preventDefault","playlistSelect","el","track","trackEndpoint","target","album","images","url","artists","init","console","log"],"sources":["C:/Users/tonyt/projects/hack kstate JTK/HackKstate2024/my-react-app/src/App.js"],"sourcesContent":["const APIController = (function() {\r\n    \r\n    const clientId = 'PASTE YOUR CLIENT ID HERE';\r\n    const clientSecret = 'PASTE YOUR CLIENT SECRET HERE';\r\n\r\n    // private methods\r\n    const _getToken = async () => {\r\n\r\n        const result = await fetch('https://accounts.spotify.com/api/token', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type' : 'application/x-www-form-urlencoded', \r\n                'Authorization' : 'Basic ' + btoa( clientId + ':' + clientSecret)\r\n            },\r\n            body: 'grant_type=client_credentials'\r\n        });\r\n\r\n        const data = await result.json();\r\n        return data.access_token;\r\n    }\r\n    \r\n    const _getGenres = async (token) => {\r\n\r\n        const result = await fetch(`https://api.spotify.com/v1/browse/categories?locale=sv_US`, {\r\n            method: 'GET',\r\n            headers: { 'Authorization' : 'Bearer ' + token}\r\n        });\r\n\r\n        const data = await result.json();\r\n        return data.categories.items;\r\n    }\r\n\r\n    const _getPlaylistByGenre = async (token, genreId) => {\r\n\r\n        const limit = 10;\r\n        \r\n        const result = await fetch(`https://api.spotify.com/v1/browse/categories/${genreId}/playlists?limit=${limit}`, {\r\n            method: 'GET',\r\n            headers: { 'Authorization' : 'Bearer ' + token}\r\n        });\r\n\r\n        const data = await result.json();\r\n        return data.playlists.items;\r\n    }\r\n\r\n    const _getTracks = async (token, tracksEndPoint) => {\r\n\r\n        const limit = 10;\r\n\r\n        const result = await fetch(`${tracksEndPoint}?limit=${limit}`, {\r\n            method: 'GET',\r\n            headers: { 'Authorization' : 'Bearer ' + token}\r\n        });\r\n\r\n        const data = await result.json();\r\n        return data.items;\r\n    }\r\n\r\n    const _getTrack = async (token, trackEndPoint) => {\r\n\r\n        const result = await fetch(`${trackEndPoint}`, {\r\n            method: 'GET',\r\n            headers: { 'Authorization' : 'Bearer ' + token}\r\n        });\r\n\r\n        const data = await result.json();\r\n        return data;\r\n    }\r\n\r\n    return {\r\n        getToken() {\r\n            return _getToken();\r\n        },\r\n        getGenres(token) {\r\n            return _getGenres(token);\r\n        },\r\n        getPlaylistByGenre(token, genreId) {\r\n            return _getPlaylistByGenre(token, genreId);\r\n        },\r\n        getTracks(token, tracksEndPoint) {\r\n            return _getTracks(token, tracksEndPoint);\r\n        },\r\n        getTrack(token, trackEndPoint) {\r\n            return _getTrack(token, trackEndPoint);\r\n        }\r\n    }\r\n})();\r\n\r\n\r\n// UI Module\r\nconst UIController = (function() {\r\n\r\n    //object to hold references to html selectors\r\n    const DOMElements = {\r\n        selectGenre: '#select_genre',\r\n        selectPlaylist: '#select_playlist',\r\n        buttonSubmit: '#btn_submit',\r\n        divSongDetail: '#song-detail',\r\n        hfToken: '#hidden_token',\r\n        divSonglist: '.song-list'\r\n    }\r\n\r\n    //public methods\r\n    return {\r\n\r\n        //method to get input fields\r\n        inputField() {\r\n            return {\r\n                genre: document.querySelector(DOMElements.selectGenre),\r\n                playlist: document.querySelector(DOMElements.selectPlaylist),\r\n                tracks: document.querySelector(DOMElements.divSonglist),\r\n                submit: document.querySelector(DOMElements.buttonSubmit),\r\n                songDetail: document.querySelector(DOMElements.divSongDetail)\r\n            }\r\n        },\r\n\r\n        // need methods to create select list option\r\n        createGenre(text, value) {\r\n            const html = `<option value=\"${value}\">${text}</option>`;\r\n            document.querySelector(DOMElements.selectGenre).insertAdjacentHTML('beforeend', html);\r\n        }, \r\n\r\n        createPlaylist(text, value) {\r\n            const html = `<option value=\"${value}\">${text}</option>`;\r\n            document.querySelector(DOMElements.selectPlaylist).insertAdjacentHTML('beforeend', html);\r\n        },\r\n\r\n        // need method to create a track list group item \r\n        createTrack(id, name) {\r\n            const html = `<a href=\"#\" class=\"list-group-item list-group-item-action list-group-item-light\" id=\"${id}\">${name}</a>`;\r\n            document.querySelector(DOMElements.divSonglist).insertAdjacentHTML('beforeend', html);\r\n        },\r\n\r\n        // need method to create the song detail\r\n        createTrackDetail(img, title, artist) {\r\n\r\n            const detailDiv = document.querySelector(DOMElements.divSongDetail);\r\n            // any time user clicks a new song, we need to clear out the song detail div\r\n            detailDiv.innerHTML = '';\r\n\r\n            const html = \r\n            `\r\n            <div class=\"row col-sm-12 px-0\">\r\n                <img src=\"${img}\" alt=\"\">        \r\n            </div>\r\n            <div class=\"row col-sm-12 px-0\">\r\n                <label for=\"Genre\" class=\"form-label col-sm-12\">${title}:</label>\r\n            </div>\r\n            <div class=\"row col-sm-12 px-0\">\r\n                <label for=\"artist\" class=\"form-label col-sm-12\">By ${artist}:</label>\r\n            </div> \r\n            `;\r\n\r\n            detailDiv.insertAdjacentHTML('beforeend', html)\r\n        },\r\n\r\n        resetTrackDetail() {\r\n            this.inputField().songDetail.innerHTML = '';\r\n        },\r\n\r\n        resetTracks() {\r\n            this.inputField().tracks.innerHTML = '';\r\n            this.resetTrackDetail();\r\n        },\r\n\r\n        resetPlaylist() {\r\n            this.inputField().playlist.innerHTML = '';\r\n            this.resetTracks();\r\n        },\r\n        \r\n        storeToken(value) {\r\n            document.querySelector(DOMElements.hfToken).value = value;\r\n        },\r\n\r\n        getStoredToken() {\r\n            return {\r\n                token: document.querySelector(DOMElements.hfToken).value\r\n            }\r\n        }\r\n    }\r\n\r\n})();\r\n\r\nconst APPController = (function(UICtrl, APICtrl) {\r\n\r\n    // get input field object ref\r\n    const DOMInputs = UICtrl.inputField();\r\n\r\n    // get genres on page load\r\n    const loadGenres = async () => {\r\n        //get the token\r\n        const token = await APICtrl.getToken();           \r\n        //store the token onto the page\r\n        UICtrl.storeToken(token);\r\n        //get the genres\r\n        const genres = await APICtrl.getGenres(token);\r\n        //populate our genres select element\r\n        genres.forEach(element => UICtrl.createGenre(element.name, element.id));\r\n    }\r\n\r\n    // create genre change event listener\r\n    DOMInputs.genre.addEventListener('change', async () => {\r\n        //reset the playlist\r\n        UICtrl.resetPlaylist();\r\n        //get the token that's stored on the page\r\n        const token = UICtrl.getStoredToken().token;        \r\n        // get the genre select field\r\n        const genreSelect = UICtrl.inputField().genre;       \r\n        // get the genre id associated with the selected genre\r\n        const genreId = genreSelect.options[genreSelect.selectedIndex].value;             \r\n        // ge the playlist based on a genre\r\n        const playlist = await APICtrl.getPlaylistByGenre(token, genreId);       \r\n        // create a playlist list item for every playlist returned\r\n        playlist.forEach(p => UICtrl.createPlaylist(p.name, p.tracks.href));\r\n    });\r\n     \r\n\r\n    // create submit button click event listener\r\n    DOMInputs.submit.addEventListener('click', async (e) => {\r\n        // prevent page reset\r\n        e.preventDefault();\r\n        // clear tracks\r\n        UICtrl.resetTracks();\r\n        //get the token\r\n        const token = UICtrl.getStoredToken().token;        \r\n        // get the playlist field\r\n        const playlistSelect = UICtrl.inputField().playlist;\r\n        // get track endpoint based on the selected playlist\r\n        const tracksEndPoint = playlistSelect.options[playlistSelect.selectedIndex].value;\r\n        // get the list of tracks\r\n        const tracks = await APICtrl.getTracks(token, tracksEndPoint);\r\n        // create a track list item\r\n        tracks.forEach(el => UICtrl.createTrack(el.track.href, el.track.name))\r\n        \r\n    });\r\n\r\n    // create song selection click event listener\r\n    DOMInputs.tracks.addEventListener('click', async (e) => {\r\n        // prevent page reset\r\n        e.preventDefault();\r\n        UICtrl.resetTrackDetail();\r\n        // get the token\r\n        const token = UICtrl.getStoredToken().token;\r\n        // get the track endpoint\r\n        const trackEndpoint = e.target.id;\r\n        //get the track object\r\n        const track = await APICtrl.getTrack(token, trackEndpoint);\r\n        // load the track details\r\n        UICtrl.createTrackDetail(track.album.images[2].url, track.name, track.artists[0].name);\r\n    });    \r\n\r\n    return {\r\n        init() {\r\n            console.log('App is starting');\r\n            loadGenres();\r\n        }\r\n    }\r\n\r\n})(UIController, APIController);\r\n\r\n// will need to call a method to load the genres on page load\r\nAPPController.init();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}