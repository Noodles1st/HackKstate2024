{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\tonyt\\\\projects\\\\hack kstate JTK\\\\HackKstate2024\\\\my-react-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherDisplay = () => {\n  _s();\n  const [accessToken, setAccessToken] = useState(null); // State for access token\n\n  const clientId = 'c4e4950088434c8d842394760ae0280a';\n  const redirectUri = 'http://localhost:3000/callback';\n  const clientSecret = 'YOUR_CLIENT_SECRET'; // Define your client secret\n  const scopes = 'user-library-read user-read-private';\n\n  // Step 1: Handle the button click to redirect to Spotify\n  const handleSpotifyAuth = () => {\n    const authUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=code&redirect_uri=${encodeURIComponent(redirectUri)}&scope=${encodeURIComponent(scopes)}`;\n    window.location.href = authUrl; // Redirect to Spotify authorization page\n  };\n\n  // Step 2: Handle the redirect back from Spotify and exchange the code for an access token\n  React.useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const authorizationCode = urlParams.get('code');\n    if (authorizationCode) {\n      // Exchange the authorization code for an access token\n      const fetchAccessToken = async () => {\n        const tokenUrl = 'https://accounts.spotify.com/api/token';\n        const body = new URLSearchParams({\n          grant_type: 'authorization_code',\n          code: authorizationCode,\n          redirect_uri: redirectUri\n        });\n        const headers = {\n          'Authorization': 'Basic ' + btoa(clientId + ':' + clientSecret),\n          // Base64 encode client ID and secret\n          'Content-Type': 'application/x-www-form-urlencoded'\n        };\n        try {\n          const response = await fetch(tokenUrl, {\n            method: 'POST',\n            headers,\n            body\n          });\n          const data = await response.json();\n          const newAccessToken = data.access_token;\n          setAccessToken(newAccessToken); // Store the access token in state\n        } catch (error) {\n          console.error('Error fetching access token:', error);\n        }\n      };\n      fetchAccessToken();\n    }\n  }, []); // Empty dependency array ensures this runs only once when the component mounts\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      backgroundColor: '#4A5568',\n      color: '#FFFFFF',\n      height: '100vh',\n      padding: '20px'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"mood(x)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), accessToken ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Access Token: \", accessToken]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }, this) // Use the access token for further Spotify API calls\n    : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Click the button below to log in to Spotify:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleSpotifyAuth,\n        style: {\n          padding: '10px 20px',\n          backgroundColor: '#1DB954',\n          color: 'white',\n          border: 'none',\n          borderRadius: '5px',\n          cursor: 'pointer'\n        },\n        children: \"Log in with Spotify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 56,\n    columnNumber: 5\n  }, this);\n};\n_s(WeatherDisplay, \"/xrtmJPCXv3vYgXhoOEInGM3amE=\");\n_c = WeatherDisplay;\nexport default WeatherDisplay;\nvar _c;\n$RefreshReg$(_c, \"WeatherDisplay\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","WeatherDisplay","_s","accessToken","setAccessToken","clientId","redirectUri","clientSecret","scopes","handleSpotifyAuth","authUrl","encodeURIComponent","window","location","href","useEffect","urlParams","URLSearchParams","search","authorizationCode","get","fetchAccessToken","tokenUrl","body","grant_type","code","redirect_uri","headers","btoa","response","fetch","method","data","json","newAccessToken","access_token","error","console","style","backgroundColor","color","height","padding","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","border","borderRadius","cursor","_c","$RefreshReg$"],"sources":["C:/Users/tonyt/projects/hack kstate JTK/HackKstate2024/my-react-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst WeatherDisplay = () => {\n  const [accessToken, setAccessToken] = useState(null);  // State for access token\n\n  const clientId = 'c4e4950088434c8d842394760ae0280a';\n  const redirectUri = 'http://localhost:3000/callback';\n  const clientSecret = 'YOUR_CLIENT_SECRET'; // Define your client secret\n  const scopes = 'user-library-read user-read-private';\n\n  // Step 1: Handle the button click to redirect to Spotify\n  const handleSpotifyAuth = () => {\n    const authUrl = `https://accounts.spotify.com/authorize?client_id=${clientId}&response_type=code&redirect_uri=${encodeURIComponent(redirectUri)}&scope=${encodeURIComponent(scopes)}`;\n    window.location.href = authUrl;  // Redirect to Spotify authorization page\n  };\n\n  // Step 2: Handle the redirect back from Spotify and exchange the code for an access token\n  React.useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const authorizationCode = urlParams.get('code');\n\n    if (authorizationCode) {\n      // Exchange the authorization code for an access token\n      const fetchAccessToken = async () => {\n        const tokenUrl = 'https://accounts.spotify.com/api/token';\n        const body = new URLSearchParams({\n          grant_type: 'authorization_code',\n          code: authorizationCode,\n          redirect_uri: redirectUri,\n        });\n\n        const headers = {\n          'Authorization': 'Basic ' + btoa(clientId + ':' + clientSecret), // Base64 encode client ID and secret\n          'Content-Type': 'application/x-www-form-urlencoded',\n        };\n\n        try {\n          const response = await fetch(tokenUrl, {\n            method: 'POST',\n            headers,\n            body,\n          });\n          const data = await response.json();\n          const newAccessToken = data.access_token;\n          setAccessToken(newAccessToken);  // Store the access token in state\n        } catch (error) {\n          console.error('Error fetching access token:', error);\n        }\n      };\n\n      fetchAccessToken();\n    }\n  }, []);  // Empty dependency array ensures this runs only once when the component mounts\n\n  return (\n    <div style={{ backgroundColor: '#4A5568', color: '#FFFFFF', height: '100vh', padding: '20px' }}>\n      {/* Display weather data and mood */}\n      <h1>mood(x)</h1>\n      \n      {/* Show the access token if available */}\n      {accessToken ? (\n        <p>Access Token: {accessToken}</p>  // Use the access token for further Spotify API calls\n      ) : (\n        <div>\n          <p>Click the button below to log in to Spotify:</p>\n          <button onClick={handleSpotifyAuth} style={{ padding: '10px 20px', backgroundColor: '#1DB954', color: 'white', border: 'none', borderRadius: '5px', cursor: 'pointer' }}>\n            Log in with Spotify\n          </button>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default WeatherDisplay;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}