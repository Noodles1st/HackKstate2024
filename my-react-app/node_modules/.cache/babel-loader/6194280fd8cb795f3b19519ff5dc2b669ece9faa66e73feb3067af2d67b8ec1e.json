{"ast":null,"code":"const express = require('express');\nconst fetch = require('node-fetch');\nconst app = express();\nconst PORT = 3000;\nconst clientId = 'YOUR_CLIENT_ID';\nconst clientSecret = 'YOUR_CLIENT_SECRET';\nconst redirectUri = 'http://localhost:3000/callback';\nconst scopes = 'user-read-private user-read-email';\n\n// Step 1: Redirect to Spotify's authorization URL\napp.get('/login', (req, res) => {\n  const authUrl = `https://accounts.spotify.com/authorize?` + `client_id=${clientId}` + `&response_type=code` + `&redirect_uri=${encodeURIComponent(redirectUri)}` + `&scope=${encodeURIComponent(scopes)}`;\n  res.redirect(authUrl);\n});\n\n// Step 2: Handle the callback and exchange the code for an access token\napp.get('/callback', async (req, res) => {\n  const code = req.query.code;\n  if (!code) {\n    return res.send(\"Error: No authorization code provided\");\n  }\n  try {\n    const tokenResponse = await fetch('https://accounts.spotify.com/api/token', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'Authorization': 'Basic ' + Buffer.from(clientId + ':' + clientSecret).toString('base64')\n      },\n      body: `grant_type=authorization_code&code=${code}&redirect_uri=${encodeURIComponent(redirectUri)}`\n    });\n    const tokenData = await tokenResponse.json();\n    const accessToken = tokenData.access_token;\n\n    // Step 3: Use the access token to fetch profile data\n    const profileResponse = await fetch('https://api.spotify.com/v1/me', {\n      headers: {\n        'Authorization': `Bearer ${accessToken}`\n      }\n    });\n    const profileData = await profileResponse.json();\n    res.send(`<pre>${JSON.stringify(profileData, null, 2)}</pre>`);\n  } catch (error) {\n    console.error(\"Error fetching access token or profile data:\", error);\n    res.send(\"An error occurred\");\n  }\n});\n\n// Start the Express server\napp.listen(PORT, () => {\n  console.log(`Server running at http://localhost:${PORT}`);\n  console.log(`Login by visiting: http://localhost:${PORT}/login`);\n});","map":{"version":3,"names":["express","require","fetch","app","PORT","clientId","clientSecret","redirectUri","scopes","get","req","res","authUrl","encodeURIComponent","redirect","code","query","send","tokenResponse","method","headers","Buffer","from","toString","body","tokenData","json","accessToken","access_token","profileResponse","profileData","JSON","stringify","error","console","listen","log"],"sources":["C:/Users/tonyt/projects/hack kstate JTK/HackKstate2024/my-react-app/src/App.js"],"sourcesContent":["const express = require('express');\r\nconst fetch = require('node-fetch');\r\nconst app = express();\r\nconst PORT = 3000;\r\n\r\nconst clientId = 'YOUR_CLIENT_ID';\r\nconst clientSecret = 'YOUR_CLIENT_SECRET';\r\nconst redirectUri = 'http://localhost:3000/callback';\r\nconst scopes = 'user-read-private user-read-email';\r\n\r\n// Step 1: Redirect to Spotify's authorization URL\r\napp.get('/login', (req, res) => {\r\n    const authUrl = `https://accounts.spotify.com/authorize?` +\r\n                    `client_id=${clientId}` +\r\n                    `&response_type=code` +\r\n                    `&redirect_uri=${encodeURIComponent(redirectUri)}` +\r\n                    `&scope=${encodeURIComponent(scopes)}`;\r\n    res.redirect(authUrl);\r\n});\r\n\r\n// Step 2: Handle the callback and exchange the code for an access token\r\napp.get('/callback', async (req, res) => {\r\n    const code = req.query.code;\r\n\r\n    if (!code) {\r\n        return res.send(\"Error: No authorization code provided\");\r\n    }\r\n\r\n    try {\r\n        const tokenResponse = await fetch('https://accounts.spotify.com/api/token', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded',\r\n                'Authorization': 'Basic ' + Buffer.from(clientId + ':' + clientSecret).toString('base64')\r\n            },\r\n            body: `grant_type=authorization_code&code=${code}&redirect_uri=${encodeURIComponent(redirectUri)}`\r\n        });\r\n\r\n        const tokenData = await tokenResponse.json();\r\n        const accessToken = tokenData.access_token;\r\n\r\n        // Step 3: Use the access token to fetch profile data\r\n        const profileResponse = await fetch('https://api.spotify.com/v1/me', {\r\n            headers: {\r\n                'Authorization': `Bearer ${accessToken}`\r\n            }\r\n        });\r\n\r\n        const profileData = await profileResponse.json();\r\n        res.send(`<pre>${JSON.stringify(profileData, null, 2)}</pre>`);\r\n    } catch (error) {\r\n        console.error(\"Error fetching access token or profile data:\", error);\r\n        res.send(\"An error occurred\");\r\n    }\r\n});\r\n\r\n// Start the Express server\r\napp.listen(PORT, () => {\r\n    console.log(`Server running at http://localhost:${PORT}`);\r\n    console.log(`Login by visiting: http://localhost:${PORT}/login`);\r\n});\r\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,KAAK,GAAGD,OAAO,CAAC,YAAY,CAAC;AACnC,MAAME,GAAG,GAAGH,OAAO,CAAC,CAAC;AACrB,MAAMI,IAAI,GAAG,IAAI;AAEjB,MAAMC,QAAQ,GAAG,gBAAgB;AACjC,MAAMC,YAAY,GAAG,oBAAoB;AACzC,MAAMC,WAAW,GAAG,gCAAgC;AACpD,MAAMC,MAAM,GAAG,mCAAmC;;AAElD;AACAL,GAAG,CAACM,GAAG,CAAC,QAAQ,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAC5B,MAAMC,OAAO,GAAG,yCAAyC,GACzC,aAAaP,QAAQ,EAAE,GACvB,qBAAqB,GACrB,iBAAiBQ,kBAAkB,CAACN,WAAW,CAAC,EAAE,GAClD,UAAUM,kBAAkB,CAACL,MAAM,CAAC,EAAE;EACtDG,GAAG,CAACG,QAAQ,CAACF,OAAO,CAAC;AACzB,CAAC,CAAC;;AAEF;AACAT,GAAG,CAACM,GAAG,CAAC,WAAW,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACrC,MAAMI,IAAI,GAAGL,GAAG,CAACM,KAAK,CAACD,IAAI;EAE3B,IAAI,CAACA,IAAI,EAAE;IACP,OAAOJ,GAAG,CAACM,IAAI,CAAC,uCAAuC,CAAC;EAC5D;EAEA,IAAI;IACA,MAAMC,aAAa,GAAG,MAAMhB,KAAK,CAAC,wCAAwC,EAAE;MACxEiB,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QACL,cAAc,EAAE,mCAAmC;QACnD,eAAe,EAAE,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACjB,QAAQ,GAAG,GAAG,GAAGC,YAAY,CAAC,CAACiB,QAAQ,CAAC,QAAQ;MAC5F,CAAC;MACDC,IAAI,EAAE,sCAAsCT,IAAI,iBAAiBF,kBAAkB,CAACN,WAAW,CAAC;IACpG,CAAC,CAAC;IAEF,MAAMkB,SAAS,GAAG,MAAMP,aAAa,CAACQ,IAAI,CAAC,CAAC;IAC5C,MAAMC,WAAW,GAAGF,SAAS,CAACG,YAAY;;IAE1C;IACA,MAAMC,eAAe,GAAG,MAAM3B,KAAK,CAAC,+BAA+B,EAAE;MACjEkB,OAAO,EAAE;QACL,eAAe,EAAE,UAAUO,WAAW;MAC1C;IACJ,CAAC,CAAC;IAEF,MAAMG,WAAW,GAAG,MAAMD,eAAe,CAACH,IAAI,CAAC,CAAC;IAChDf,GAAG,CAACM,IAAI,CAAC,QAAQc,IAAI,CAACC,SAAS,CAACF,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC,QAAQ,CAAC;EAClE,CAAC,CAAC,OAAOG,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,8CAA8C,EAAEA,KAAK,CAAC;IACpEtB,GAAG,CAACM,IAAI,CAAC,mBAAmB,CAAC;EACjC;AACJ,CAAC,CAAC;;AAEF;AACAd,GAAG,CAACgC,MAAM,CAAC/B,IAAI,EAAE,MAAM;EACnB8B,OAAO,CAACE,GAAG,CAAC,sCAAsChC,IAAI,EAAE,CAAC;EACzD8B,OAAO,CAACE,GAAG,CAAC,uCAAuChC,IAAI,QAAQ,CAAC;AACpE,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}